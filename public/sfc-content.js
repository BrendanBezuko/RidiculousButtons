const sfcContent = [
  {
    "fileName": "Arrow.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <span>{{ text || \"Click\" }}</span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 3rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  clip-path: polygon(75% 0%, 100% 50%, 75% 100%, 0 100%, 0 0);\n\n  &:hover {\n    cursor: pointer;\n    animation: narrow 1.3s ease-in;\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 0 100%, 0 0);\n\n    transform: translate(30%, 0%);\n  }\n}\n\n@keyframes narrow {\n  0% {\n    clip-path: polygon(75% 0%, 100% 50%, 75% 100%, 0 100%, 0 0);\n    transform: translate(0%, 0%);\n  }\n  70% {\n    transform: translate(0%, 0%);\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 33% 100%, 33% 0);\n  }\n  100% {\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 0 100%, 0 0);\n    transform: translate(30%, 0%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Blob.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <svg height=\"150\" width=\"150\">\n      <defs>\n        <clipPath id=\"clip-shape\">\n          <path\n            d=\"m 131.431,87.725071 c -13.81711,-4.654056 -16.54128,-2.889666 -23.291,-8.961132 -1.61441,-1.448278 -1.57899,-6.198243 7.39549,-5.077929 4.49972,0.562775 7.5517,-1.793053 7.5517,-5.15427 0,-2.240903 -2.84524,-5.355734 -7.08277,-3.809067 -6.13416,2.240903 -10.11443,-0.301506 -10.85601,-3.136327 -0.94368,-3.583902 0.12601,-7.670498 15.91584,-15.156895 19.35139,-9.186297 8.25293,-25.901709 -6.94659,-10.158338 -6.73464,6.971576 -9.91293,9.856557 -14.397259,12.09746 -4.025564,2.008572 -8.853104,-0.07441 -5.196008,-4.704216 1.417541,-1.793329 3.824053,-3.17684 4.484624,-5.37723 0.943382,-3.136327 -1.836243,-6.04997 -4.2474,-6.04997 -2.411156,0 -5.428006,1.343274 -6.371389,4.704491 -1.417541,6.162139 -5.029631,5.853743 -6.73463,4.074745 -3.263947,-3.39484 -2.088566,-7.35466 -1.52846,-13.483451 C 80.788,20.333996 85.27756,3.709256 71.500807,4.9351245 64.857349,5.526562 62.8948,11.470977 65.043761,22.095906 67.717404,35.285017 63.671806,44.49033 59.353559,46.35063 54.162487,48.591257 51.529494,47.741307 40.47168,40.528306 34.594776,36.690301 28.106952,40.058959 26.780584,44.559781 c -1.170445,3.964506 2.128926,8.755259 7.082773,10.306336 7.632426,2.391656 11.017454,2.94699 14.558695,4.776147 3.460521,1.793329 3.89432,6.140918 0.438735,10.07428 -3.460521,3.936118 -12.399862,0.680181 -25.616799,-0.215519 -22.84704653,-1.546391 -17.7117238,22.442103 3.77353,15.38702 12.273555,-4.033956 17.464337,-3.138808 19.593263,-0.672739 2.936129,3.402005 0.918121,8.000941 -4.802569,11.276171 -18.251505,10.457363 2.209646,23.447493 9.761352,8.961133 3.157965,-6.052451 6.790089,-7.912475 10.382144,-6.571957 2.930903,1.096612 6.684108,10.804617 2.441645,23.900027 -3.778467,11.65016 -3.521207,24.1974 5.351932,24.1974 8.293578,0 9.590039,-11.72375 8.177724,-24.49395 -0.524973,-4.77862 -0.13647,-12.18344 3.778176,-14.04126 3.148092,-1.49403 8.066516,-3.15783 11.406246,3.43315 3.072019,6.04969 9.680629,5.15179 12.278489,1.79305 1.89664,-2.45863 2.86035,-7.91247 -4.69136,-10.73985 -8.999734,-3.375827 -5.695427,-12.561849 1.15012,-11.66422 7.55693,0.988852 12.73755,3.629651 21.71725,10.90521 12.53053,10.14649 28.61797,-6.456751 7.86907,-13.445139 z\"\n          />\n        </clipPath>\n      </defs>\n    </svg>\n    <span>{{ text || \"Click\" }}</span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  position: relative;\n  width: 150px;\n  height: 150px;\n  clip-path: url(#clip-shape);\n  background: linear-gradient(45deg, $primary, $secondary);\n  cursor: pointer;\n  padding: 0;\n  outline: none;\n  transition: transform 0.3s ease;\n  text-align: center;\n  color: $dark_text;\n\n  span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.5) rotate(30deg);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "CrossFill.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  transition: color 0.5s linear;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  border: $primary 5px solid;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n  z-index: 99;\n  pointer-events: all;\n  overflow: hidden;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: $primary;\n    padding: 3rem 4rem;\n    z-index: -1;\n    border-radius: 4rem;\n    transform: translate(90%, 90%);\n    pointer-events: none;\n  }\n\n  &:hover {\n    &::before {\n      animation: crossFill 2s ease-out;\n      transform: translate(25%, 10%);\n    }\n    color: $light_text;\n    cursor: pointer;\n  }\n}\n\n.dark-mode .btn {\n  color: $light_text;\n\n  &:hover {\n    color: $dark_text;\n  }\n}\n\n@keyframes crossFill {\n  from {\n    transform: translate(90%, 90%);\n  }\n  to {\n    transform: translate(25%, 10%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "EraseRight.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  height: auto;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n  overflow: hidden;\n  transition: box-shadow 0.5s ease;\n  z-index: 1;\n\n  &:hover {\n    cursor: pointer;\n    -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    border-radius: 0;\n    animation: borderRadius 0.5s linear;\n  }\n\n  // Pseudo-element\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    z-index: -1;\n    background-color: $primary;\n    border-radius: 0.2rem;\n  }\n\n  &:hover::after {\n    animation: eraseRight 1s forwards;\n  }\n}\n\n.dark-mode {\n  .btn {\n    &:hover {\n      animation: fadeColor 0.5s linear;\n      color: $light_text;\n    }\n  }\n}\n\n@keyframes borderRadius {\n  from {\n    border-radius: 1rem;\n  }\n  to {\n    border-radius: 0;\n  }\n}\n\n@keyframes fadeColor {\n  from {\n    color: $dark_text;\n    border-radius: 1rem;\n  }\n  to {\n    color: $light_text;\n    border-radius: 0;\n  }\n}\n\n@keyframes eraseRight {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Fill.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  border: $primary 5px solid;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n\n  &::after {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n  }\n\n  &:hover {\n    background-color: $primary;\n    color: $light_text;\n    cursor: pointer;\n  }\n}\n\n.dark-mode {\n  .btn {\n    color: $light_text;\n\n    &:hover {\n      color: $dark_text;\n      background-color: $primary;\n      cursor: pointer;\n    }\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Glow.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n\n  &:hover {\n    animation: glow 2s infinite;\n    cursor: pointer;\n  }\n}\n\n@keyframes glow {\n  0% {\n    box-shadow: 0 0 10px 5px $primary;\n  }\n  50% {\n    box-shadow: 0 0 20px 10px $secondary;\n  }\n  100% {\n    box-shadow: 0 0 10px 5px $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Gradient.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  background: linear-gradient(45deg, $primary, $secondary);\n  background-size: 200% 200%;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n\n  &:hover {\n    animation: spinGradient 2s infinite;\n    cursor: pointer;\n  }\n}\n\n@keyframes spinGradient {\n  0% {\n    background-position: 0% 50%, 100% 50%;\n  }\n  50% {\n    background-position: 100% 50%, 0% 50%;\n  }\n  100% {\n    background-position: 0% 50%, 100% 50%;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Image.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <span>{{ text || \"Click\" }}</span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  padding: 1rem 4rem;\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0), $secondary),\n    url(\"/mountains.webp\");\n  background-size: cover;\n  position: relative;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &::before {\n    content: \"\";\n    background: rgba(255, 255, 255, 0.5);\n    padding: 1rem 3rem;\n    border-radius: 0.5rem;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1;\n  }\n\n  span {\n    position: relative;\n    z-index: 2;\n  }\n\n  &:hover {\n    cursor: pointer;\n\n    &::before {\n      animation: grow 0.5s linear;\n    }\n  }\n}\n\n@keyframes grow {\n  0% {\n    padding: 1rem 3rem;\n  }\n  50% {\n    padding: 1.1rem 3.2rem;\n  }\n  100% {\n    padding: 1rem 3rem;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Parallelogram.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 5rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  clip-path: polygon(25% 0%, 100% 0%, 73% 100%, 0% 100%);\n\n  &:hover {\n    cursor: pointer;\n    animation: pulse 1.3s linear;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1) scaleX(1);\n  }\n  50% {\n    transform: scale(1.05) scaleX(1.2);\n  }\n  100% {\n    transform: scale(1) scaleX(1);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Pulse.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    animation: growNShrink 1s linear;\n    cursor: pointer;\n  }\n}\n\n@keyframes growNShrink {\n  0% {\n    transform: scale(0.9);\n    background-color: $primary;\n  }\n  50% {\n    transform: scale(1.2);\n    background-color: $secondary;\n  }\n  100% {\n    transform: scale(1);\n    background-color: $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Shake.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    animation: shake 0.5s linear;\n    cursor: pointer;\n  }\n}\n\n@keyframes shake {\n  0% {\n    transform: rotate(30deg) scale(1);\n    background-color: $primary;\n  }\n  25% {\n    transform: rotate(-30deg) scale(1.1);\n    background-color: $secondary;\n  }\n  50% {\n    transform: rotate(30deg) scale(0.9);\n  }\n  75% {\n    transform: rotate(-30deg) scale(1.1);\n  }\n  100% {\n    transform: rotate(0deg) scale(1);\n    background-color: $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Spinning.vue",
    "content": "<template>\n  <div class=\"btn-container\">\n    <div\n      :class=\"['btn', { 'spin-btn': isSpinning }, { 'pulse-btn': !isSpinning }]\"\n      role=\"button\"\n      @click=\"handleClick\"\n    >\n      {{ text || \"Click\" }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps({\n  text: String,\n  clickHandler: {\n    type: Function,\n    required: false,\n  },\n});\n\nconst isSpinning = ref(false);\n\nasync function handleClick() {\n  if (isSpinning.value) return;\n\n  isSpinning.value = true;\n  await nextTick();\n\n  setTimeout(() => {\n    //navigateTo() or other functionality can be added here\n    if (props.clickHandler) {\n      props.clickHandler();\n    }\n    isSpinning.value = false;\n  }, 1200);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 5rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n.btn-container {\n  margin: 4rem;\n}\n\n.spin-btn {\n  animation: rotation 1s cubic-bezier(0.66, 0.385, 0.82, 0.085);\n}\n\n@keyframes rotation {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(1080deg);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Video.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <video autoplay muted loop class=\"btn-video\">\n      <source src=\"/btnwaves.mp4\" type=\"video/mp4\" />\n    </video>\n    <div class=\"btn-text\">\n      {{ text || \"Click\" }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  position: relative;\n\n  &:hover {\n    animation: glow 2s infinite;\n    cursor: pointer;\n  }\n}\n\n.btn-text {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9;\n  text-shadow: 0 0 5px white, 0 0 10px rgba(255, 255, 255, 0.5),\n    0 0 10px rgba(255, 255, 255, 0.2);\n  padding: 0.5rem;\n  border-radius: 1rem;\n}\n\n.btn-video {\n  display: block;\n\n  max-width: 6rem;\n  max-height: 6rem;\n  border-radius: 1rem;\n}\n\n@keyframes glow {\n  0% {\n    box-shadow: 0 0 5px 2px $primary;\n  }\n  50% {\n    box-shadow: 0 0 10px 5px $secondary;\n  }\n  100% {\n    box-shadow: 0 0 5px 2px $primary;\n  }\n}\n</style>\n"
  }
];
export default sfcContent;