const sfcContent = [
  {
    "fileName": "Arrow.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <span>{{ text || \"Click\" }}</span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 3rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  clip-path: polygon(75% 0%, 100% 50%, 75% 100%, 0 100%, 0 0);\n\n  &:hover {\n    cursor: pointer;\n    animation: narrow 1.3s ease-in;\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 33% 100%, 33% 0);\n    transform: translate(10%, 0%);\n  }\n}\n\n@keyframes narrow {\n  0% {\n    clip-path: polygon(75% 0%, 100% 50%, 75% 100%, 0 100%, 0 0);\n    transform: translate(0%, 0%);\n  }\n  100% {\n    transform: translate(0%, 0%);\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 33% 100%, 33% 0);\n  }\n  100% {\n    clip-path: polygon(33% 0, 100% 50%, 32% 100%, 33% 100%, 33% 0);\n    transform: translate(10%, 0%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "CrossFill.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  transition: color 0.5s linear;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  border: $primary 5px solid;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n  z-index: 99;\n  pointer-events: all;\n  overflow: hidden;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: $primary;\n    padding: 3rem 4rem;\n    z-index: -1;\n    border-radius: 4rem;\n    transform: translate(90%, 90%);\n    pointer-events: none;\n  }\n\n  &:hover {\n    &::before {\n      animation: crossFill 2s ease-out;\n      transform: translate(25%, 10%);\n    }\n    color: $light_text;\n    cursor: pointer;\n  }\n}\n\n.dark-mode .btn {\n  color: $light_text;\n\n  &:hover {\n    color: $dark_text;\n  }\n}\n\n@keyframes crossFill {\n  from {\n    transform: translate(90%, 90%);\n  }\n  to {\n    transform: translate(25%, 10%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "EraseRight.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  height: auto;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n  overflow: hidden;\n  transition: box-shadow 0.5s ease;\n  z-index: 1;\n\n  &:hover {\n    cursor: pointer;\n    -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0);\n    border-radius: 0;\n    animation: borderRadius 0.5s linear;\n  }\n\n  // Pseudo-element\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    z-index: -1;\n    background-color: $primary;\n    border-radius: 0.2rem;\n  }\n\n  &:hover::after {\n    animation: eraseRight 1s forwards;\n  }\n}\n\n.dark-mode {\n  .btn {\n    &:hover {\n      animation: fadeColor 0.5s linear;\n      color: $light_text;\n    }\n  }\n}\n\n@keyframes borderRadius {\n  from {\n    border-radius: 1rem;\n  }\n  to {\n    border-radius: 0;\n  }\n}\n\n@keyframes fadeColor {\n  from {\n    color: $dark_text;\n    border-radius: 1rem;\n  }\n  to {\n    color: $light_text;\n    border-radius: 0;\n  }\n}\n\n@keyframes eraseRight {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Fill.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: rgba(0, 0, 0, 0);\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  border: $primary 5px solid;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  position: relative;\n\n  &::after {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n  }\n\n  &:hover {\n    background-color: $primary;\n    color: $light_text;\n    cursor: pointer;\n  }\n}\n\n.dark-mode {\n  .btn {\n    color: $light_text;\n\n    &:hover {\n      color: $dark_text;\n      background-color: $primary;\n      cursor: pointer;\n    }\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Glow.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n\n  &:hover {\n    animation: glow 2s infinite;\n    cursor: pointer;\n  }\n}\n\n@keyframes glow {\n  0% {\n    box-shadow: 0 0 10px 5px $primary;\n  }\n  50% {\n    box-shadow: 0 0 20px 10px $secondary;\n  }\n  100% {\n    box-shadow: 0 0 10px 5px $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Gradient.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  background: linear-gradient(45deg, $primary, $secondary);\n  background-size: 200% 200%;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n\n  &:hover {\n    animation: spinGradient 2s infinite;\n    cursor: pointer;\n  }\n}\n\n@keyframes spinGradient {\n  0% {\n    background-position: 0% 50%, 100% 50%;\n  }\n  50% {\n    background-position: 100% 50%, 0% 50%;\n  }\n  100% {\n    background-position: 0% 50%, 100% 50%;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Image.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <span>{{ text || \"Click\" }}</span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  padding: 1rem 4rem;\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0), $secondary),\n    url(\"/mountains.webp\");\n  background-size: cover;\n  position: relative;\n  box-shadow: inset 0 0 0 3px #ffffff;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  transition: all 0.3s ease;\n  overflow: hidden;\n\n  &::before {\n    content: \"\";\n    background: rgba(255, 255, 255, 0.5);\n    padding: 1rem 3rem;\n    border-radius: 0.5rem;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1;\n    transition: all 0.3s ease;\n  }\n\n  span {\n    position: relative;\n    z-index: 2;\n    font-weight: 600;\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n    transition: transform 0.3s ease;\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: translateY(-2px);\n    box-shadow: 15px 15px 40px -3px rgba(0, 0, 0, 0.6);\n\n    &::before {\n      background: rgba(255, 255, 255, 0.6);\n      padding: 1.1rem 3.2rem;\n    }\n\n    span {\n      transform: scale(1.05);\n    }\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 10px 10px 30px -3px rgba(0, 0, 0, 0.5);\n  }\n}\n\n@keyframes grow {\n  0% {\n    padding: 1rem 3rem;\n  }\n  50% {\n    padding: 1.1rem 3.2rem;\n  }\n  100% {\n    padding: 1rem 3rem;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Parallelogram.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 5rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  clip-path: polygon(25% 0%, 100% 0%, 73% 100%, 0% 100%);\n\n  &:hover {\n    cursor: pointer;\n    animation: pulse 1.3s linear;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1) scaleX(1);\n  }\n  50% {\n    transform: scale(1.05) scaleX(1.2);\n  }\n  100% {\n    transform: scale(1) scaleX(1);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Pulse.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    animation: growNShrink 1s linear;\n    cursor: pointer;\n  }\n}\n\n@keyframes growNShrink {\n  0% {\n    transform: scale(0.9);\n    background-color: $primary;\n  }\n  50% {\n    transform: scale(1.2);\n    background-color: $secondary;\n  }\n  100% {\n    transform: scale(1);\n    background-color: $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "SVG.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <svg height=\"80\" width=\"80\">\n      <defs>\n        <clipPath id=\"clip-shape\">\n          <path\n            d=\"M 7.6137094,7.6137094 C 2,13.227381 2,22.262475 2,40.332704 2,58.40274 2,67.43814 7.6137094,73.051585 c 5.6136716,5.613823 14.6487656,5.613823 32.7189946,5.613823 18.070036,0 27.105436,0 32.718881,-5.613823 5.613823,-5.613445 5.613823,-14.648845 5.613823,-32.718881 0,-18.070229 0,-27.105323 -5.613823,-32.7189946 C 67.43814,2 58.40274,2 40.332704,2 22.262475,2 13.227381,2 7.6137094,7.6137094 Z M 46.036994,19.042375 c 1.533691,0.410927 2.443709,1.987398 2.032783,3.521089 l -9.92127,37.026442 c -0.410927,1.533692 -1.987551,2.444094 -3.521242,2.033167 -1.533692,-0.411314 -2.44371,-1.987554 -2.032746,-3.521246 l 9.921232,-37.026553 c 0.410927,-1.533692 1.987551,-2.443864 3.521243,-2.032899 z m 5.679373,7.75762 c 1.122765,-1.122727 2.942799,-1.122727 4.065565,0 l 0.798853,0.798623 c 2.435277,2.435238 4.466145,4.466028 5.861454,6.294959 1.47313,1.930435 2.506195,3.970118 2.506195,6.439127 0,2.469009 -1.033065,4.508693 -2.506195,6.439128 -1.395309,1.828853 -3.426177,3.859719 -5.861454,6.294996 L 55.781932,53.8653 c -1.122766,1.122766 -2.9428,1.122766 -4.065565,0 -1.122765,-1.122766 -1.122765,-2.942803 0,-4.065568 l 0.657406,-0.657789 c 2.61314,-2.613141 4.364178,-4.372612 5.497294,-5.858004 1.082517,-1.418693 1.327461,-2.244763 1.327461,-2.951235 0,-0.706472 -0.244944,-1.532541 -1.327461,-2.951235 -1.133116,-1.485392 -2.884154,-3.244863 -5.497294,-5.857965 l -0.657406,-0.657713 c -1.122765,-1.122726 -1.122765,-2.943031 0,-4.065796 z m -26.832279,0 c 1.122726,-1.122727 2.943032,-1.122727 4.065796,0 1.122727,1.122765 1.122727,2.94307 0,4.065796 l -0.657712,0.657713 c -2.612949,2.613102 -4.363872,4.372573 -5.49714,5.857965 -1.08263,1.418694 -1.327347,2.244763 -1.327347,2.951235 0,0.706472 0.244717,1.532542 1.327347,2.951235 1.133268,1.485392 2.884191,3.244863 5.49714,5.858004 l 0.657712,0.657789 c 1.122727,1.122765 1.122727,2.942802 0,4.065568 -1.122764,1.122766 -2.94307,1.122766 -4.065796,0 l -0.798662,-0.798472 c -2.435431,-2.435277 -4.466259,-4.466143 -5.861684,-6.294996 -1.472896,-1.930435 -2.505962,-3.970119 -2.505962,-6.439128 0,-2.469009 1.033066,-4.508692 2.505962,-6.439127 1.395425,-1.828931 3.426253,-3.859682 5.861684,-6.294959 z\"\n          />\n        </clipPath>\n      </defs>\n    </svg>\n    <span></span>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n  clip-path: url(#clip-shape);\n  background: linear-gradient(45deg, $primary, $secondary);\n  cursor: pointer;\n  padding: 0;\n  outline: none;\n  transition: transform 0.3s ease;\n  text-align: center;\n  color: $dark_text;\n\n  span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.2);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Shake.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">{{ text || \"Click\" }}</div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    animation: shake 0.5s linear;\n    cursor: pointer;\n  }\n}\n\n@keyframes shake {\n  0% {\n    transform: rotate(30deg) scale(1);\n    background-color: $primary;\n  }\n  25% {\n    transform: rotate(-30deg) scale(1.1);\n    background-color: $secondary;\n  }\n  50% {\n    transform: rotate(30deg) scale(0.9);\n  }\n  75% {\n    transform: rotate(-30deg) scale(1.1);\n  }\n  100% {\n    transform: rotate(0deg) scale(1);\n    background-color: $primary;\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Spinning.vue",
    "content": "<template>\n  <div class=\"btn-container\">\n    <div\n      :class=\"['btn', { 'spin-btn': isSpinning }, { 'pulse-btn': !isSpinning }]\"\n      role=\"button\"\n      @click=\"handleClick\"\n    >\n      {{ text || \"Click\" }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps({\n  text: String,\n  clickHandler: {\n    type: Function,\n    required: false,\n  },\n});\n\nconst isSpinning = ref(false);\n\nasync function handleClick() {\n  if (isSpinning.value) return;\n\n  isSpinning.value = true;\n  await nextTick();\n\n  setTimeout(() => {\n    //navigateTo() or other functionality can be added here\n    if (props.clickHandler) {\n      props.clickHandler();\n    }\n    isSpinning.value = false;\n  }, 1200);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  padding: 1rem 5rem;\n  width: fit-content;\n  text-align: center;\n  -webkit-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  -moz-box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n  box-shadow: 13px 13px 37px -3px rgba(0, 0, 0, 0.57);\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n.btn-container {\n  margin: 4rem;\n}\n\n.spin-btn {\n  animation: rotation 1s cubic-bezier(0.66, 0.385, 0.82, 0.085);\n}\n\n@keyframes rotation {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(1080deg);\n  }\n}\n</style>\n"
  },
  {
    "fileName": "Video.vue",
    "content": "<template>\n  <div role=\"button\" class=\"btn\">\n    <video autoplay muted loop class=\"btn-video\">\n      <source src=\"/btnwaves.mp4\" type=\"video/mp4\" />\n    </video>\n    <div class=\"btn-text\">\n      {{ text || \"Click\" }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps([\"text\"]);\n\nconst text = ref(props.text);\n</script>\n\n<style lang=\"scss\" scoped>\n.btn {\n  display: inline-block;\n  color: $dark_text;\n  text-decoration: none;\n  background-color: $primary;\n  width: fit-content;\n  text-align: center;\n  border-radius: 1rem;\n  position: relative;\n\n  &:hover {\n    animation: glow 2s infinite;\n    cursor: pointer;\n  }\n}\n\n.btn-text {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9;\n  text-shadow: 0 0 5px white, 0 0 10px rgba(255, 255, 255, 0.5),\n    0 0 10px rgba(255, 255, 255, 0.2);\n  padding: 0.5rem;\n  border-radius: 1rem;\n}\n\n.btn-video {\n  display: block;\n\n  max-width: 6rem;\n  max-height: 6rem;\n  border-radius: 1rem;\n}\n\n@keyframes glow {\n  0% {\n    box-shadow: 0 0 5px 2px $primary;\n  }\n  50% {\n    box-shadow: 0 0 10px 5px $secondary;\n  }\n  100% {\n    box-shadow: 0 0 5px 2px $primary;\n  }\n}\n</style>\n"
  }
];
export default sfcContent;